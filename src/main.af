.needs <io>
.needs <std>
.needs "head/CLineArgs"
.needs "head/DateFunctions"
.needs <String>
.needs <DateTime>

int printJulian(int year, int month, int day){
	int julian = daysSinceJan1(month, day, year) + 1;
	printInt(year);
	// get the number of digits in julian
	int digits = 0;
	int temp = julian;
	while(temp > 0){
		temp = temp / 10;
		digits++;
	};

	for int i = digits; i < 3; i++
		printChar('0');
	printInt(julian);
};

int printDaysSince(int year, int month, int day, int relYear){
	int date = dateRelativeTo(month, day, year, relYear);
	printInt(date);
};

bool validateDate(int year, int month, int day){
			if month < 1 | month > 12 {
			print("Invalid month\n");
			return false;
		};

		if day < 1 | day > 31 {
			print("Invalid day\n");
			return false;
		};

		if month == 2 & day > 29 {
			print("Invalid day\n");
			return false;
		};

		if month == 4 | month == 6 | month == 9 | month == 11 & day > 30 {
			print("Invalid day\n");
			return false;
		};
	return true;
};

int main(int argc, adr argv){
	CArgs args = new CArgs(argc, argv);

	if args.has("-h") |
	args.has("--help"){
		print("Usage: fdate <year> <month> <day> <options>\n");
		print("Options:\n");
		print("  -h, --help: Print this help message\n");
		print("  -v, --version: Print the version number\n");
		print("  -j, --julian: Use Julian calendar\n");
		print("  -r, --relative: Print relative date\n");
		print("  -d, --day: print the day of the week\n");
		print("  \t eg fdate 2022 12 5 -r 1997\n");
		return 0;
	};

	if args.has("-v") |
	args.has("--version"){
		print("fdate version 1.0.0\n");
		return 0;
	};

	int year;
	int month;
	int day;
	
	LinkedList dateStrings = args.getTaglessArgs();
	if dateStrings.size() == 0{
		DateTime dt = Now(-4);
		year = dt.getYear();
		month = dt.getMonth();
		day = dt.getDay();
	} else if dateStrings.size() == 3{

		String yearString = dateStrings.get(0);
		String monthString = dateStrings.get(1);
		String dayString = dateStrings.get(2);

		if !yearString.isNumeric() {
			print("Invalid year\n");
			return 1;
		};

		if !monthString.isNumeric() {
			print("Invalid month\n");
			return 1;
		};

		if !dayString.isNumeric() {
			print("Invalid day\n");
			return 1;
		};

		year = yearString.toInt();
		month = monthString.toInt();
		day = dayString.toInt();

		if !validateDate(year, month, day){
			return 1;
		};
	} else {
		print("Invalid number of arguments\n");
		return 1;
	};

	// print mm/dd/yyyy
	print("Formatted date for: ");
	printInt(month); print("/"); printInt(day); print("/"); printInt(year);
	print("\n\n");

	bool pass = false;
	// printJulian
	if args.has("-j") |
	args.has("--julian"){
		print("Julian date: ");
		printJulian(year, month, day); print("\n");
		pass = true;
	};

	if args.has("-r") |
	args.has("--relative"){
		// get the year to compare to
		int relYear = 0;

		if args.has("-r"){
			String relYearString = args.get("-r");
			if !relYearString.isNumeric() {
				print("Invalid year\n");
				return 1;
			};
			relYear = relYearString.toInt();
		} else if args.has("--relative"){
			String relYearString = args.get("--relative");
			if !relYearString.isNumeric() {
				print("Invalid year\n");
				return 1;
			};
			relYear = relYearString.toInt();
		};

		print("Days since Jan 1, ");
		printInt(relYear); print(": ");
		printDaysSince(year, month, day, relYear); print("\n");
		pass = true;
	};

	if args.has("-d") |
	args.has("--day"){
		print("Day of the week: ");
		int dow = dayOfWeek(month, day, year);
		print(dowToString(dow)); print("\n");
		pass = true;
	};

	if !pass {
		// print the juliandate
		print("Julian date: ");
		printJulian(year, month, day); print("\n");

		// print days since epoch
		print("Days since Epoch: ");
		printDaysSince(year, month, day, 1970); print("\n");

		// days sinc 1900
		print("Days since Jan 1, 1900: ");
		printDaysSince(year, month, day, 1900); print("\n");

		// dayse since 1957
		print("Days since Jan 1, 1957: ");
		printDaysSince(year, month, day, 1957); print("\n");
	};

	return 0;
};
