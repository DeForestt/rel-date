.needs <std>

import String from "String";
import ICollection from "Collections";
import LinkedList from "Collections";

class CArg {
    String tag;
    String value;

    public CArg init(String tag, String value);
};

class CArgs {
    private LinkedList args;

    public CArgs init(int argc, adr argv);

    private LinkedList parse(int argc, adr argv);

    public String get(String tag);
    public bool has(String tag);
    public LinkedList getTaglessArgs();
};

class TagArg{   
    adr sTag;
    bool found;
};

CArg init@CArg(String tag, String value){
    my.tag = tag;
    my.value = value;
};

CArgs init@CArgs(int argc, adr argv){
    my.args = my.parse(argc, argv);
    LinkedList args = my.args;
};

LinkedList parse@CArgs(int argc, adr argv){
    LinkedList args = new LinkedList();

    for int i = 1; i < argc; i++{
        adr ptr = argv + i * 8;
        String curr = new String(ptr as adr);

        // check for -
        if curr.at(0) == '-' {
            i++;
            if i < argc {
                ptr = argv + i * 8;
                String value = new String(ptr as adr);
                if value.at(0) != '-' {
                    CArg arg = new CArg(curr, value);
                    args.append(arg);
                } else {
                    CArg arg = new CArg(curr, new String("EMPTY"));
                    i = i - 1;
                    args.append(arg);
                };
            } else {
                String value = new String("EMPTY");
                CArg arg = new CArg(curr, value);
                args.append(arg);
            };
        } else {
            String tag = new String("EMPTY");
            String value = curr;
            CArg arg = new CArg(tag, value);
            args.append(arg);
        };
    };
    return args;
};

bool has@CArgs(adr tag){
    LinkedList args = my.args;

    TagArg tagArg = new TagArg();
    tagArg.sTag = tag;
    tagArg.found = false;

    if args.size() > 0 args.forEach([CArg arg, int index, TagArg t] => {
        String val = arg.tag;
        if val == t.sTag {
            t.found = true;
            return 1;
        };
        return 0;
    }, tagArg);

    bool found = tagArg.found;
    free(tagArg);
    return found;
};

String get@CArgs(adr tag){
    LinkedList args = my.args;

    if my.has(tag) == false panic("Tag not found");

    LinkedList found = args.where([CArg arg, int index, adr tg] => {
        String val = arg.tag;
        if val == tg
            return true;
        return false;
    }, tag);

    CArg result = found.get(0);

    return result.value;
};

LinkedList getTaglessArgs@CArgs(){
    LinkedList args = my.args;

    LinkedList found = args.where([CArg arg, int index, adr tg] => {
        String val = arg.tag;
        return val == "EMPTY";
    });

    LinkedList strings = found.map([CArg arg] => return arg.value);

    free(found);
    return strings;
};